/*
 * Copyright UVSQ - CEA/DAM/DIF (2017-2018)
 * Contributors:  Sebastien GOUGEAUD  -- sebastien.gougeaud@uvsq.fr
 *                Soraya ZERTAL       --      soraya.zertal@uvsq.fr
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
 */

//! \file	perfparityctrl.hpp
//! \brief	Definition of the parity controller. RAID NP controllers are now
//!			deprecated as we suppose that request sizes are multiples of a
//!			stripe unit size.

#ifndef _OGSS_PERFPARITYCTRL_HPP_
#define _OGSS_PERFPARITYCTRL_HPP_

/*----------------------------------------------------------------------------*/
/* HEADERS -------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

#include <map>
#include <vector>

#include "controller/volumecontroller.hpp"

#include "structure/devicestate.hpp"
#include "structure/hardware.hpp"

//! \brief	Controller for a parity volume.
class PerfectParityCtrl:
public VolumeController {
public:

/*----------------------------------------------------------------------------*/
/* PUBLIC FUNCTIONS ----------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

//! \brief	Constructor.
//! \param	vol					Volume.
//! \param	dev					Device contained in the volume.
	PerfectParityCtrl (
		const Volume					& vol,
		const Device					& dev);

//! \brief	Destructor.
	~PerfectParityCtrl ();

//! \brief	Request decomposition.
//! \param	request				Request to decompose.
//! \param	subrequests			New requests.
	void decompose (
		Request					& request,
		std::vector <Request>	& subrequests);

//! \brief	Update the volume state when receiving an event.
//! \param	event				Event received.
//! \param	subrequests			Requests created due to the event.
	void updateScheme (
		const Request			& event);

//! \brief	Generate the requests issued from a decraid failure of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	void generateDecraidFailureRequests (
		Request					& block,
		std::vector <Request>	& subrequests);

//! \brief	Generate the requests issued from a decraid renewal of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	void generateDecraidRenewalRequests (
		Request					& block,
		std::vector <Request>	& subrequests);

//! \brief	Generate the requests issued from a failure of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	void generateFailureRequests (
		Request					& block,
		std::vector <Request>	& subrequests);

//! \brief	Generate the requests issued from a renewal of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	void generateRenewalRequests (
		Request					& block,
		std::vector <Request>	& subrequests);

//! \brief	Multiply the requests generated by the volume to take into account
//!			the events.
//! \param	block				Targeted block.
//! \param	subrequests			Requests issued from the multiplier.
	void requestMultiplier (
		Request					& block,
		std::vector <Request>	& subrequests);

//! \brief	Getter of the block location from its logical volume address.
//! \param 	block				Targeted block.
	void getBlockLocation (
		Request					& block);

//! \brief	Getter of the number of data blocks in the requested device.
//! \param	idxDevice			Targeted device index.
//! \return						Requested number of data blocks.
	inline OGSS_Ulong getNumberDataBlocks (
		OGSS_Ulong				idxDevice)
		{ return _numMUByDev / _numMUBySU; }

protected:

/*----------------------------------------------------------------------------*/
/* PRIVATE FUNCTIONS ---------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

//! \brief	Update the decomposition according to a failure if there was one.
//! \param	request				Request to decompose.
//! \param	subrequests			New requests.
	void manageFailure (
		Request							& request,
		std::vector <Request>			& subrequests);

//! \brief	Check if the request targets a parity block.
//! \param	request				Request.
//! \return						TRUE if it targets a parity block, FALSE else.
	OGSS_Bool targetsParity (
		Request							& request);

//! \brief	Get the preread stripe for a given request.
//! \param	parent						Parent request.
//! \param	children					New requests.
//! \param	idx							Stripe index.
//! \param	start						Start address on the stripe.
//! \param	end							End address on the stripe.
	void _getPrereadStripe (
		Request							& parent,
		std::vector <Request>			& children,
		OGSS_Ulong						idx,
		OGSS_Ulong						start,
		OGSS_Ulong						end);

//! \brief	Get the data stripe for a given request.
//! \param	parent						Parent request.
//! \param	children					New requests.
//! \param	idx							Stripe index.
//! \param	start						Start address on the stripe.
//! \param	end							End address on the stripe.
	void _getDataStripe (
		Request							& parent,
		std::vector <Request>			& children,
		OGSS_Ulong						idx,
		OGSS_Ulong						start,
		OGSS_Ulong						end);

//! \brief	Update the request address to the physical one.
//! \param	requests					Requests to process.
	void _realloc (
		std::vector <Request>			& requests);

/*----------------------------------------------------------------------------*/
/* ATTRIBUTES ----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

	OGSS_Ulong							_numMUByDev;	//!< Number of memory units by device.
	OGSS_Ulong							_numMUBySU;		//!< Number of memory units by stripe unit.
	OGSS_Ulong							_numDevices;	//!< Number of devices.
	OGSS_Ulong							_numParity;		//!< Number of parity devices.
	OGSS_Ulong							_numData;		//!< Number of data devices.
	OGSS_DeclusteringType				_parity;		//!< Parity strategy.
};

#endif
