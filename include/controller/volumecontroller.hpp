/*
 * Copyright UVSQ - CEA/DAM/DIF (2017-2018)
 * Contributors:  Sebastien GOUGEAUD  -- sebastien.gougeaud@uvsq.fr
 *                Soraya ZERTAL       --      soraya.zertal@uvsq.fr
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
 */

//! \file	volumecontroller.hpp
//! \brief	Definition of the volume controller interface.

#ifndef _OGSS_VOLUMECONTROLLER_HPP_
#define _OGSS_VOLUMECONTROLLER_HPP_

/*----------------------------------------------------------------------------*/
/* HEADERS -------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

#include <vector>

#include "structure/devicestate.hpp"
#include "structure/request.hpp"

//! \brief	Volume controller interface, used to decompose the requests coming
//!			from the preprocessing module, according to a given layout.
class VolumeController {
public:

/*----------------------------------------------------------------------------*/
/* PUBLIC FUNCTIONS ----------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

//! \brief	Destructor.
	virtual ~VolumeController () = default;

//! \brief	Request decomposition.
//! \param	request				Request to decompose.
//! \param	subrequests			New requests.
	virtual void decompose (
		Request					& request,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Update the volume state when receiving an event.
//! \param	event				Event received.
	virtual void updateScheme (
		const Request			& event);

//! \brief	Generate the requests issued from a decraid failure of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	virtual void generateDecraidFailureRequests (
		Request					& block,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Generate the requests issued from a decraid renewal of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	virtual void generateDecraidRenewalRequests (
		Request					& block,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Generate the requests issued from a failure of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	virtual void generateFailureRequests (
		Request					& block,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Generate the requests issued from a renewal of a given block.
//! \param	block				Block to recover.
//! \param	subrequests			Recovery requests.
	virtual void generateRenewalRequests (
		Request					& block,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Multiply the requests generated by the volume to take into account
//!			the events.
//! \param	block				Targeted block.
//! \param	subrequests			Requests issued from the multiplier.
	virtual void requestMultiplier (
		Request					& block,
		std::vector <Request>	& subrequests) = 0;

//! \brief	Getter of the block location from its logical volume address.
//! \param 	block				Targeted block.
	virtual void getBlockLocation (
		Request					& block) = 0;

//! \brief	Getter of the number of data blocks in the requested device.
//! \param	idxDevice			Targeted device index.
//! \return						Requested number of data blocks.
	virtual OGSS_Ulong getNumberDataBlocks (
		OGSS_Ulong				idxDevice) = 0;

protected:

/*----------------------------------------------------------------------------*/
/* PRIVATE FUNCTIONS ---------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

//! \brief	Constructor.
	VolumeController () {  }

	Request						_lastEventBlock;	//!< Last event block processed.
	std::map <OGSS_Ulong, OGSS_DeviceState>
								_deviceState;		//!< Devices state.
};

#endif
